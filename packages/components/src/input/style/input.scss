@use 'sass:map';
@use '../../../style/mixins.scss' as *;
@use '../../../style/var.scss' as *;

$input-padding-horizontal-map: (
  mini: 6px,
  small: 8px,
  medium: 12px,
  large: 16px
);

@include b(input) {
  position: relative;
  display: inline-flex;
  width: 100%;
  box-sizing: border-box;
  vertical-align: middle;
  font-size: map-get($font-size-map, 'medium');
  height: map-get($size-map, 'medium');
  line-height: map-get($size-map, 'medium');
  border: 1px solid transparent;
  box-shadow: $tu-shadow-inside;
  border-radius: $tu-border-radius;
  transition: all $tu-transition-duration-2 ease;

  &:hover:not(.is-disabled) {
    box-shadow: none;
    border-color: $tu-color-shadow-light;
  }

  @include e(wrapper) {
    position: relative;
    display: inline-flex;
    flex-grow: 1;
    align-items: center;
    justify-content: center;
    padding: map-get($input-padding-horizontal-map, 'medium');

    @include e(inner) {
      width: 100%;
      height: 100%;
      padding: 0;
      outline: none;
      border: none;
      background: none;
      box-sizing: border-box;
      flex-grow: 1;
      font-size: inherit;
      color: $tu-color-text;
      -webkit-appearance: none;
      height: map-get($size-map, 'medium');
      line-height: map-get($size-map, 'medium');

      &:focus {
        outline: none;
      }

      &::placeholder {
        color: $tu-color-text-placeholder;
      }

      &::-moz-placeholder {
        color: $tu-color-text-placeholder;
      }

      &::-ms-input-placeholder {
        color: $tu-color-text-placeholder;
      }

      &[type='password']::-ms-reveal {
        display: none;
      }
    }

    @include when(focus) {
      box-shadow: none;
      border-color: $tu-color-shadow-light;
    }
  }

  @each $slot in (prefix, suffix) {
    @include e(icon) {
      font-size: map-get($font-size-map, 'medium');

      @include m((clear, password)) {
        &::before {
          width: map-get($icon-hover-bg-size-map, 'medium');
          height: map-get($icon-hover-bg-size-map, 'medium');
        }
      }
    }

    @include e($slot) {
      display: inline-flex;
      white-space: nowrap;
      flex-shrink: 0;
      flex-wrap: nowrap;
      height: 100%;
      text-align: center;
      color: $tu-color-text-placeholder;
      transition: all $tu-transition-duration-2;
      pointer-events: none;

      @include e(#{$slot}-inner) {
        pointer-events: all;
        display: inline-flex;
        align-items: center;
        justify-content: center;

        @if $slot == prefix {
          > :last-child {
            margin-right: 8px;
          }
          > :first-child {
            @include e(icon) {
              margin-left: 0;
            }
          }
        }

        @if $slot == suffix {
          > * {
            margin-left: 8px;
          }
          @include e(icon) {
            @include m((clear, password)) {
              cursor: pointer;
              transition: color $tu-transition-duration-3;

              &:hover {
                color: $tu-color-text;
              }
            }
          }

          @include e(count) {
            height: 100%;
            display: inline-flex;
            align-items: center;

            @include e(count-inner) {
              line-height: 1;
              display: inline-flex;
              align-items: center;
              padding-left: 2px;
              color: $tu-color-text-placeholder;
              font-size: $tu-font-size-mini;
            }
          }
        }
      }
    }
  }

  @each $size in (mini, small, medium, large) {
    @include m($size) {
      font-size: map-get($font-size-map, $size);
      height: map-get($size-map, $size);
      line-height: map-get($size-map, $size);

      @include e(wrapper) {
        padding: map-get($input-padding-horizontal-map, $size);

        @include e(inner) {
          height: map-get($size-map, $size);
          line-height: map-get($size-map, $size);
        }

        @include e((prefix, suffix)) {
          @include e(icon) {
            font-size: map-get($font-size-map, $size);

            @include m((clear, password)) {
              &::before {
                width: map-get($icon-hover-bg-size-map, $size);
                height: map-get($icon-hover-bg-size-map, $size);
              }
            }
          }
        }
      }
    }
  }

  @include when(disabled) {
    cursor: not-allowed;
    box-shadow: none;
    opacity: 0.7;
    background-color: $tu-color-base-bg;

    @include e(wrapper) {
      @include e(inner) {
        cursor: not-allowed;
      }
    }
  }
}

@include b(input-group) {
  display: inline-flex;
  align-items: stretch;
  width: 100%;
  box-shadow: $tu-shadow-inside;

  .#{$namespace}-input__wrapper {
    box-shadow: none;
  }

  @include e((prepend, append)) {
    position: relative;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    border-radius: $tu-border-radius;
    padding: 0 12px;
    white-space: nowrap;
    color: $tu-color-text;
    box-sizing: border-box;
    font-size: $tu-font-size-small;
    cursor: pointer;
    transition: color $tu-transition-duration-2;
    box-shadow: $tu-shadow-outside;
    margin: 6px 6px;

    &::after {
      content: '';
      box-sizing: content-box;
      position: absolute;
      width: calc(100% - 2px);
      height: calc(100% - 2px);
      top: 0;
      left: 0;
      border: 1px solid transparent;
      border-radius: $tu-border-radius;
      transition: border $tu-transition-duration-2;
    }

    &:hover {
      box-shadow: none;

      &::after {
        border-color: $tu-color-shadow-light;
      }
    }

    &:active {
      color: $tu-color-primary;
      transition: none;
      box-shadow: $tu-shadow-inside;
    }
  }

  @include e(prepend) {
    border-right: 0;
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
    margin-right: 0;
  }

  @include e(append) {
    border-left: 0;
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
    margin-left: 0;
  }

  @include m(prepend) {
    .#{$namespace}-input__wrapper {
      border-top-left-radius: 0;
      border-bottom-left-radius: 0;
    }
  }

  @include m(append) {
    .#{$namespace}-input__wrapper {
      border-top-left-radius: 0;
      border-bottom-left-radius: 0;
    }
  }
}

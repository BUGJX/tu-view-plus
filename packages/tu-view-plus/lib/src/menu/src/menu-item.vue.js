"use strict";Object.defineProperties(exports,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}});const e=require("vue"),I=require("./menu-item.js"),T=require("./hooks/use-level.js"),b=require("./hooks/use-menu-context.js"),k=require("./hooks/use-menu-data-collector.js"),x=require("@tu-view-plus/utils"),N=require("./hooks/use-menu.js"),V=require("@tu-view-plus/hooks"),E=require("scroll-into-view-if-needed"),S=require("./menu-indent.vue.js"),w=require("../../tooltip/index.js");require("../style/menu.css");const y=e.defineComponent({name:"TuMenuItem",inheritAttrs:!1,props:I.menuItemProps,emits:I.menuItemEmits,setup(t,{emit:c}){const{key:l}=N.useMenu(),{level:d}=T.useLevel(),n=b.useMenuContext(),r=e.ref(),i=e.computed(()=>(n.selectedKeys||[]).indexOf(l.value)>-1),o=k.useMenuDataCollectorContext();e.onMounted(()=>{o==null||o.collectMenuItem(l.value)}),e.onUnmounted(()=>{o==null||o.removeMenuItem(l.value)});function u(){n.autoScrollIntoView&&r.value&&i.value&&E(r.value,{behavior:"smooth",block:"nearest",scrollMode:"if-needed",boundary:document.documentElement,...n.scrollConfig||{}})}let s;return e.onMounted(()=>{s=setTimeout(()=>{u()},500)}),e.onUnmounted(()=>{clearTimeout(s)}),e.watch([i],()=>{u()}),{menuContext:n,level:d,isSelected:i,refItemElement:r,onClick(m){t.disabled||(n.onMenuItemClick&&n.onMenuItemClick(l.value),c("click",m))}}},render(){var h,p;const t=V.useNamespace("menu"),{level:c,menuContext:l,disabled:d,isSelected:n,onClick:r}=this,{collapsed:i,inTrigger:o,mode:u,tooltipProps:s}=l,m=i&&!o&&c===1,q=u==="vertical"&&c>1,v=((p=(h=this.$slots).default)==null?void 0:p.call(h))||[],f=q&&!o&&!i,a=this.$slots.icon&&this.$slots.icon(),C=[f&&e.createVNode(S.default,{level:c},null),a&&e.createVNode("span",{class:t.e("icon")},[a]),f||a?e.createVNode("span",{class:[t.e("item-inner"),t.is("title",!!a)]},[v]):v].filter(Boolean),M=e.createVNode("div",e.mergeProps({ref:"refItemElement",class:[t.e("item"),t.is("disabled",d),t.is("selected",n),t.is("has-icon",!!a)]},this.$attrs,{onClick:r}),[C,n&&u==="horizontal"&&e.createVNode("div",{class:t.e("selected-label")},null)]);if(m){const g=[t.e("item-tooltip"),s==null?void 0:s.class];return e.createVNode(w.TuTooltip,e.mergeProps({trigger:"hover",position:"right",class:g},x.omit(s||{},["class"])),{default:()=>M,content:()=>v})}return M}});exports.default=y;
